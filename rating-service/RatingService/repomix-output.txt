This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
appsettings.Development.json
appsettings.json
Controllers/RatingsController.cs
Data/RatingDbContext.cs
Events/RatingCreatedEvent.cs
Messaging/Interfaces/IEventPublisher.cs
Messaging/Kafka/KafkaEventPublisher.cs
Migrations/20250223102744_InitialCreate.cs
Migrations/20250223102744_InitialCreate.Designer.cs
Migrations/RatingDbContextModelSnapshot.cs
Models/Rating.cs
output.txt
Program.cs
Properties/launchSettings.json
RatingService.csproj
RatingService.http
Repositories/IRatingRepository.cs
Repositories/RatingRepository.cs
Services/RatingService.cs

================================================================
Files
================================================================

================
File: .gitignore
================
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.suo
*.user
*.sln.docstates

# Build results

[Dd]ebug/
[Rr]elease/
x64/
[Bb]in/
[Oo]bj/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

*_i.c
*_p.c
*_i.h
*.ilk
*.meta
*.obj
*.pch
*.pdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.log
*.svclog
*.scc

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opensdf
*.sdf
*.cachefile

# Visual Studio profiler
*.psess
*.vsp
*.vspx

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# Click-Once directory
publish/

# Publish Web Output
*.Publish.xml
*.pubxml
*.azurePubxml

# NuGet Packages Directory
## TODO: If you have NuGet Package Restore enabled, uncomment the next line
packages/
## TODO: If the tool you use requires repositories.config, also uncomment the next line
!packages/repositories.config

# Windows Azure Build Output
csx/
*.build.csdef

# Windows Store app package directory
AppPackages/

# Others
sql/
*.Cache
ClientBin/
[Ss]tyle[Cc]op.*
![Ss]tyle[Cc]op.targets
~$*
*~
*.dbmdl
*.[Pp]ublish.xml

*.publishsettings

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file to a newer
# Visual Studio version. Backup files are not needed, because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm

# SQL Server files
App_Data/*.mdf
App_Data/*.ldf

# =========================
# Windows detritus
# =========================

# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Mac desktop service store files
.DS_Store

_NCrunch*

================
File: appsettings.Development.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

================
File: appsettings.json
================
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=ratingsdb;Username=postgres;Password=default"
  },
  "Kafka": {
    "BootstrapServers": "localhost:9093",
    "TopicName": "rating-created"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

================
File: Controllers/RatingsController.cs
================
using Microsoft.AspNetCore.Mvc;
using RatingService.Models;
using RatingService.Services;

namespace RatingService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class RatingsController : ControllerBase
    {
        private readonly IRatingService _ratingService;

        public RatingsController(IRatingService ratingService)
        {
            _ratingService = ratingService;
        }

        // POST /api/ratings
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] Rating rating)
        {
            if (rating == null)
            {
                return BadRequest("Rating data is required.");
            }

            try
            {
                var created = await _ratingService.CreateRatingAsync(rating);
                return Ok(created);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
        }

        // GET /api/ratings/provider/{providerId}/average
        [HttpGet("provider/{providerId}/average")]
        public async Task<IActionResult> GetAverage(int providerId)
        {
            var averageScore = await _ratingService.GetAverageScoreAsync(providerId);
            return Ok(new { ProviderId = providerId, AverageScore = averageScore });
        }
    }
}

================
File: Data/RatingDbContext.cs
================
using Microsoft.EntityFrameworkCore;
using RatingService.Models;

namespace RatingService.Data
{
    public class RatingDbContext : DbContext
    {
        public RatingDbContext(DbContextOptions<RatingDbContext> options)
            : base(options)
        {
        }

        public DbSet<Rating> Ratings => Set<Rating>();

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // İsteğe bağlı Fluent API ayarları (tablo isimleri vs.)
            modelBuilder.Entity<Rating>(entity =>
            {
                entity.ToTable("Ratings");
                entity.HasKey(r => r.Id);
            });
        }
    }
}

================
File: Events/RatingCreatedEvent.cs
================
using System;

namespace RatingService.Events
{
    public class RatingCreatedEvent
    {
        public int ProviderId { get; set; }
        public int Score { get; set; }
        public string? Comment { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}

================
File: Messaging/Interfaces/IEventPublisher.cs
================
using System.Threading.Tasks;

namespace RatingService.Messaging.Interfaces
{
    public interface IEventPublisher<TEvent>
    {
        Task PublishAsync(TEvent @event);
    }
}

================
File: Messaging/Kafka/KafkaEventPublisher.cs
================
using System.Text.Json;
using Confluent.Kafka;
using Microsoft.Extensions.Configuration;
using RatingService.Events;
using RatingService.Messaging.Interfaces;

namespace RatingService.Messaging.Kafka
{
    public class KafkaEventPublisher : IEventPublisher<RatingCreatedEvent>
    {
        private readonly string _bootstrapServers;
        private readonly string _topicName;

        public KafkaEventPublisher(IConfiguration configuration)
        {
             System.Diagnostics.Debug.WriteLine(configuration["Kafka:BootstrapServers"]);

            _bootstrapServers = configuration["Kafka:BootstrapServers"] ?? "localhost:9093";
            _topicName = configuration["Kafka:TopicName"] ?? "rating-created";
        }

        public async Task PublishAsync(RatingCreatedEvent @event)
        {
            var config = new ProducerConfig
            {
                BootstrapServers = _bootstrapServers
            };

            using var producer = new ProducerBuilder<Null, string>(config).Build();
            
            // Event'i JSON'a dönüştür
            string messageValue = JsonSerializer.Serialize(@event);

            var message = new Message<Null, string>
            {
                Value = messageValue
            };

            // Mesajı gönder
            var deliveryResult = await producer.ProduceAsync(_topicName, message);

            // İsteğe bağlı: Loglamak veya hata durumunda handle etmek
            Console.WriteLine($"Kafka delivery to topic {_topicName}: {deliveryResult.Status}");
        }
    }
}

================
File: Migrations/20250223102744_InitialCreate.cs
================
using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace RatingService.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Ratings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ProviderId = table.Column<int>(type: "integer", nullable: false),
                    Score = table.Column<int>(type: "integer", nullable: false),
                    Comment = table.Column<string>(type: "text", nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ratings", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Ratings");
        }
    }
}

================
File: Migrations/20250223102744_InitialCreate.Designer.cs
================
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RatingService.Data;

#nullable disable

namespace RatingService.Migrations
{
    [DbContext(typeof(RatingDbContext))]
    [Migration("20250223102744_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RatingService.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Ratings", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}

================
File: Migrations/RatingDbContextModelSnapshot.cs
================
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RatingService.Data;

#nullable disable

namespace RatingService.Migrations
{
    [DbContext(typeof(RatingDbContext))]
    partial class RatingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RatingService.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Ratings", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}

================
File: Models/Rating.cs
================
using System;

namespace RatingService.Models
{
    public class Rating
    {
        public int Id { get; set; }
        public int ProviderId { get; set; }  // Hangi sağlayıcıya ait
        public int Score { get; set; }       // Rating skoru (1-5 arası gibi)
        public string? Comment { get; set; } // Opsiyonel yorum
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}

================
File: output.txt
================
The following text is a Git repository with code. The structure of the text are sections that begin with ----!@#$----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.
----!@#$----
appsettings.Development.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

----!@#$----
appsettings.json
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=ratingsdb;Username=postgres;Password=default"
  },
  "Kafka": {
    "BootstrapServers": "localhost:9093",
    "TopicName": "rating-created"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

----!@#$----
output.txt

----!@#$----
Program.cs
using Microsoft.EntityFrameworkCore;
using RatingService.Data;
using Microsoft.OpenApi.Models;
using RatingService.Repositories;
using RatingService.Services;
using RatingService.Messaging.Interfaces;
using RatingService.Messaging.Kafka;
using RatingService.Events;



var builder = WebApplication.CreateBuilder(args);

// PostgreSQL Connection
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<RatingDbContext>(options =>
    options.UseNpgsql(connectionString));

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddScoped<IRatingRepository, RatingRepository>();
builder.Services.AddScoped<IRatingService, RatingServiceImplementation>();
builder.Services.AddSingleton<IEventPublisher<RatingCreatedEvent>, KafkaEventPublisher>();



var app = builder.Build();

// Swagger middleware
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}


app.MapControllers();

app.Run();

----!@#$----
RatingService.csproj
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Confluent.Kafka" Version="2.8.0" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.2">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="9.0.3" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="7.2.0" />
    <PackageReference Include="Testcontainers.Kafka" Version="4.2.0" />
    <PackageReference Include="Testcontainers.PostgreSql" Version="4.2.0" />
  </ItemGroup>

</Project>

----!@#$----
RatingService.http
@RatingService_HostAddress = http://localhost:5282

GET {{RatingService_HostAddress}}/weatherforecast/
Accept: application/json

###

----!@#$----
bin\Debug\net9.0\appsettings.Development.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

----!@#$----
bin\Debug\net9.0\appsettings.json
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=ratingsdb;Username=postgres;Password=default"
  },
  "Kafka": {
    "BootstrapServers": "localhost:9093",
    "TopicName": "rating-created"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

----!@#$----
     d          "d   @                      d            _CorExeMain mscoree.dll     ï¿½% @@                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ï¿½   P  ï¿½                  8  ï¿½                   ï¿½                     h  ï¿½                   ï¿½  ï¿½  <          <4   V S _ V E R S I O N _ I N F O     ï¿½ï¿½ï¿½                 ?                         D    V a r F i l e I n f o     $    T r a n s l a t i o n       ï¿½ï¿½   S t r i n g F i l e I n f o   x   0 0 0 0 0 4 b 0   <   C o m p a n y N a m e     R a t i n g S e r v i c e   D   F i l e D e s c r i p t i o n     R a t i n g S e r v i c e   0   F i l e V e r s i o n     1 . 0 . 0 . 0   D   I n t e r n a l N a m e   R a t i n g S e r v i c e . d l l   (   L e g a l C o p y r i g h t       L   O r i g i n a l F i l e n a m e   R a t i n g S e r v i c e . d l l   <   P r o d u c t N a m e     R a t i n g S e r v i c e   ï¿½ /  P r o d u c t V e r s i o n   1 . 0 . 0 + e 0 6 6 3 f e 0 6 6 5 4 b 5 4 1 e 6 0 f 2 7 d f d 5 1 6 6 6 1 7 4 0 1 a 3 1 a b     8   A s s e m b l y   V e r s i o n   1 . 0 . 0 . 0   Üƒ  ï¿½          ï»¿<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
  <assemblyIdentity version="1.0.0.0" name="MyApplication.app"/>
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
    <security>
      <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
        <requestedExecutionLevel level="asInvoker" uiAccess="false"/>
      </requestedPrivileges>
    </security>
  </trustInfo>
</assembly>                                                           `     44                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
----!@#$----
obj\Debug\net9.0\staticwebassets\msbuild.build.RatingService.props
ï»¿<Project>
  <Import Project="Microsoft.AspNetCore.StaticWebAssetEndpoints.props" />
  <Import Project="Microsoft.AspNetCore.StaticWebAssets.props" />
</Project>
----!@#$----
obj\Debug\net9.0\staticwebassets\msbuild.buildMultiTargeting.RatingService.props
ï»¿<Project>
  <Import Project="..\build\RatingService.props" />
</Project>
----!@#$----
obj\Debug\net9.0\staticwebassets\msbuild.buildTransitive.RatingService.props
ï»¿<Project>
  <Import Project="..\buildMultiTargeting\RatingService.props" />
</Project>
----!@#$----
Properties\launchSettings.json
ï»¿{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "http://localhost:5282",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "https://localhost:7131;http://localhost:5282",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

----!@#$----
Repositories\IRatingRepository.cs
using RatingService.Models;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace RatingService.Repositories
{
    public interface IRatingRepository
    {
        Task<Rating> CreateAsync(Rating rating);
        Task<Rating?> GetByIdAsync(int id);
        Task<IEnumerable<Rating>> GetByProviderIdAsync(int providerId);
        Task<double> GetAverageScoreByProviderIdAsync(int providerId);
    }
}

----!@#$----
Repositories\RatingRepository.cs
using Microsoft.EntityFrameworkCore;
using RatingService.Data;
using RatingService.Models;

namespace RatingService.Repositories
{
    public class RatingRepository : IRatingRepository
    {
        private readonly RatingDbContext _context;

        public RatingRepository(RatingDbContext context)
        {
            _context = context;
        }

        public async Task<Rating> CreateAsync(Rating rating)
        {
            _context.Ratings.Add(rating);
            await _context.SaveChangesAsync();
            return rating;
        }

        public async Task<Rating?> GetByIdAsync(int id)
        {
            return await _context.Ratings.FindAsync(id);
        }

        public async Task<IEnumerable<Rating>> GetByProviderIdAsync(int providerId)
        {
            return await _context.Ratings
                .Where(r => r.ProviderId == providerId)
                .ToListAsync();
        }

        public async Task<double> GetAverageScoreByProviderIdAsync(int providerId)
        {
            var ratings = await _context.Ratings
                .Where(r => r.ProviderId == providerId)
                .ToListAsync();

            if (ratings.Count == 0)
                return 0.0;

            return ratings.Average(r => r.Score);
        }
    }
}

----!@#$----
Services\RatingService.cs
using RatingService.Models;
using RatingService.Repositories;
using RatingService.Events;
using RatingService.Messaging.Interfaces;

namespace RatingService.Services
{
    public interface IRatingService
    {
        Task<Rating> CreateRatingAsync(Rating rating);
        Task<double> GetAverageScoreAsync(int providerId);
    }

    public class RatingServiceImplementation : IRatingService
    {
        private readonly IRatingRepository _ratingRepository;
        private readonly IEventPublisher<RatingCreatedEvent> _eventPublisher;


        public RatingServiceImplementation(IRatingRepository ratingRepository, IEventPublisher<RatingCreatedEvent> eventPublisher)
        {
            _ratingRepository = ratingRepository;
            _eventPublisher = eventPublisher;
        }

        public async Task<Rating> CreateRatingAsync(Rating rating)
        {
            // Ã–rneÄŸin score validasyonu
            if (rating.Score < 1 || rating.Score > 5)
            {
                throw new ArgumentException("Score must be between 1 and 5.");
            }

            var created = await _ratingRepository.CreateAsync(rating);

            // Kafka'ya "RatingCreated" event'i gÃ¶nder
            var ratingEvent = new RatingCreatedEvent
            {
                ProviderId = created.ProviderId,
                Score = created.Score,
                Comment = created.Comment,
                CreatedAt = created.CreatedAt
            };
            await _eventPublisher.PublishAsync(ratingEvent);

            return created;
        }

        public async Task<double> GetAverageScoreAsync(int providerId)
        {
            return await _ratingRepository.GetAverageScoreByProviderIdAsync(providerId);
        }
    }
}

--END--

================
File: Program.cs
================
using Microsoft.EntityFrameworkCore;
using RatingService.Data;
using Microsoft.OpenApi.Models;
using RatingService.Repositories;
using RatingService.Services;
using RatingService.Messaging.Interfaces;
using RatingService.Messaging.Kafka;
using RatingService.Events;



var builder = WebApplication.CreateBuilder(args);

// PostgreSQL Connection
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<RatingDbContext>(options =>
    options.UseNpgsql(connectionString));

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddScoped<IRatingRepository, RatingRepository>();
builder.Services.AddScoped<IRatingService, RatingServiceImplementation>();
builder.Services.AddSingleton<IEventPublisher<RatingCreatedEvent>, KafkaEventPublisher>();



var app = builder.Build();

// Swagger middleware
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}


app.MapControllers();

app.Run();

================
File: Properties/launchSettings.json
================
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "http://localhost:5282",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "https://localhost:7131;http://localhost:5282",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

================
File: RatingService.csproj
================
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Confluent.Kafka" Version="2.8.0" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.2">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="9.0.3" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="7.2.0" />
    <PackageReference Include="Testcontainers.Kafka" Version="4.2.0" />
    <PackageReference Include="Testcontainers.PostgreSql" Version="4.2.0" />
  </ItemGroup>

</Project>

================
File: RatingService.http
================
@RatingService_HostAddress = http://localhost:5282

GET {{RatingService_HostAddress}}/weatherforecast/
Accept: application/json

###

================
File: Repositories/IRatingRepository.cs
================
using RatingService.Models;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace RatingService.Repositories
{
    public interface IRatingRepository
    {
        Task<Rating> CreateAsync(Rating rating);
        Task<Rating?> GetByIdAsync(int id);
        Task<IEnumerable<Rating>> GetByProviderIdAsync(int providerId);
        Task<double> GetAverageScoreByProviderIdAsync(int providerId);
    }
}

================
File: Repositories/RatingRepository.cs
================
using Microsoft.EntityFrameworkCore;
using RatingService.Data;
using RatingService.Models;

namespace RatingService.Repositories
{
    public class RatingRepository : IRatingRepository
    {
        private readonly RatingDbContext _context;

        public RatingRepository(RatingDbContext context)
        {
            _context = context;
        }

        public async Task<Rating> CreateAsync(Rating rating)
        {
            _context.Ratings.Add(rating);
            await _context.SaveChangesAsync();
            return rating;
        }

        public async Task<Rating?> GetByIdAsync(int id)
        {
            return await _context.Ratings.FindAsync(id);
        }

        public async Task<IEnumerable<Rating>> GetByProviderIdAsync(int providerId)
        {
            return await _context.Ratings
                .Where(r => r.ProviderId == providerId)
                .ToListAsync();
        }

        public async Task<double> GetAverageScoreByProviderIdAsync(int providerId)
        {
            var ratings = await _context.Ratings
                .Where(r => r.ProviderId == providerId)
                .ToListAsync();

            if (ratings.Count == 0)
                return 0.0;

            return ratings.Average(r => r.Score);
        }
    }
}

================
File: Services/RatingService.cs
================
using RatingService.Models;
using RatingService.Repositories;
using RatingService.Events;
using RatingService.Messaging.Interfaces;

namespace RatingService.Services
{
    public interface IRatingService
    {
        Task<Rating> CreateRatingAsync(Rating rating);
        Task<double> GetAverageScoreAsync(int providerId);
    }

    public class RatingServiceImplementation : IRatingService
    {
        private readonly IRatingRepository _ratingRepository;
        private readonly IEventPublisher<RatingCreatedEvent> _eventPublisher;


        public RatingServiceImplementation(IRatingRepository ratingRepository, IEventPublisher<RatingCreatedEvent> eventPublisher)
        {
            _ratingRepository = ratingRepository;
            _eventPublisher = eventPublisher;
        }

        public async Task<Rating> CreateRatingAsync(Rating rating)
        {
            // Örneğin score validasyonu
            if (rating.Score < 1 || rating.Score > 5)
            {
                throw new ArgumentException("Score must be between 1 and 5.");
            }

            var created = await _ratingRepository.CreateAsync(rating);

            // Kafka'ya "RatingCreated" event'i gönder
            var ratingEvent = new RatingCreatedEvent
            {
                ProviderId = created.ProviderId,
                Score = created.Score,
                Comment = created.Comment,
                CreatedAt = created.CreatedAt
            };
            await _eventPublisher.PublishAsync(ratingEvent);

            return created;
        }

        public async Task<double> GetAverageScoreAsync(int providerId)
        {
            return await _ratingRepository.GetAverageScoreByProviderIdAsync(providerId);
        }
    }
}



================================================================
End of Codebase
================================================================
